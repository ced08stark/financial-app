"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const express_validator_1 = require("express-validator");
const post_controller_1 = require("../controllers/post.controller");
const verifyToken_1 = require("../middlewares/verifyToken");
const router = express_1.default.Router();
/**
 * @swagger
 * tags:
 *   name: Posts
 *   description: Gestion des publications des utilisateurs
 */
/**
 * @swagger
 * /api/posts:
 *   post:
 *     summary: Cr√©er un post
 *     description: Permet aux utilisateurs connect√©s de cr√©er un post, optionnellement dans un groupe.
 *     tags: [Posts]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - content
 *             properties:
 *               content:
 *                 type: string
 *                 example: "Voici mon premier post !"
 *               groupId:
 *                 type: string
 *                 example: "65b34567cdef8901ghi23456"
 *     responses:
 *       201:
 *         description: Post cr√©√© avec succ√®s
 *       400:
 *         description: Erreur de validation
 *       401:
 *         description: Non autoris√©
 */
/**
 * @swagger
 * /api/posts:
 *   get:
 *     summary: R√©cup√©rer tous les posts
 *     description: Permet aux utilisateurs connect√©s de voir tous les posts, avec option de filtrage par groupe.
 *     tags: [Posts]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - name: groupId
 *         in: query
 *         required: false
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: Liste des posts r√©cup√©r√©e avec succ√®s
 *       400:
 *         description: ID du groupe invalide
 *       401:
 *         description: Non autoris√©
 */
/**
 * @swagger
 * /api/posts/{id}:
 *   get:
 *     summary: R√©cup√©rer un post par ID
 *     description: Permet d'afficher un post sp√©cifique.
 *     tags: [Posts]
 *     parameters:
 *       - name: id
 *         in: path
 *         required: true
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: Post r√©cup√©r√© avec succ√®s
 *       400:
 *         description: ID du post invalide
 *       404:
 *         description: Post non trouv√©
 */
/**
 * @swagger
 * /api/posts/{id}:
 *   put:
 *     summary: Mettre √† jour un post par ID
 *     description: Permet √† l'auteur d'un post de le modifier.
 *     tags: [Posts]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - name: id
 *         in: path
 *         required: true
 *         schema:
 *           type: string
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - content
 *             properties:
 *               content:
 *                 type: string
 *                 example: "Mise √† jour de mon post !"
 *     responses:
 *       200:
 *         description: Post mis √† jour avec succ√®s
 *       400:
 *         description: ID du post invalide ou contenu vide
 *       401:
 *         description: Non autoris√©
 *       403:
 *         description: Acc√®s interdit (seul l'auteur peut modifier)
 *       404:
 *         description: Post non trouv√©
 */
/**
 * @swagger
 * /api/posts/{id}:
 *   delete:
 *     summary: Supprimer un post par ID
 *     description: Permet √† l'auteur d'un post de le supprimer.
 *     tags: [Posts]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - name: id
 *         in: path
 *         required: true
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: Post supprim√© avec succ√®s
 *       400:
 *         description: ID du post invalide
 *       401:
 *         description: Non autoris√©
 *       403:
 *         description: Acc√®s interdit (seul l'auteur peut supprimer)
 *       404:
 *         description: Post non trouv√©
 */
// üìù Cr√©er un post (Utilisateur connect√©)
router.post("/", verifyToken_1.authMiddleware, [
    (0, express_validator_1.body)("content").notEmpty().withMessage("Le contenu du post est requis"),
    (0, express_validator_1.body)("groupId").optional().isMongoId().withMessage("ID de groupe invalide"),
], post_controller_1.createPost);
// üìå R√©cup√©rer tous les posts (Utilisateur connect√©)
router.get("/", verifyToken_1.authMiddleware, [
    (0, express_validator_1.query)("groupId").optional().isMongoId().withMessage("ID de groupe invalide"),
], post_controller_1.getPosts);
// üîç R√©cup√©rer un post par ID
router.get("/:id", (0, express_validator_1.param)("id").isMongoId().withMessage("ID du post invalide"), post_controller_1.getPostById);
// ‚úèÔ∏è Mettre √† jour un post par ID (Auteur uniquement)
router.put("/:id", verifyToken_1.authMiddleware, [
    (0, express_validator_1.param)("id").isMongoId().withMessage("ID du post invalide"),
    (0, express_validator_1.body)("content").notEmpty().withMessage("Le contenu ne peut pas √™tre vide"),
], post_controller_1.updatePostById);
// üóëÔ∏è Supprimer un post par ID (Auteur uniquement)
router.delete("/:id", verifyToken_1.authMiddleware, (0, express_validator_1.param)("id").isMongoId().withMessage("ID du post invalide"), post_controller_1.deletePostById);
exports.default = router;
