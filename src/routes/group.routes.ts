import express from "express";
import { body, param } from "express-validator";
import { 
  createGroup, getAllGroups, getGroupById, updateGroupById, deleteGroupById, 
  addMemberToGroup, removeMemberFromGroup 
} from "../controllers/group.controller";
import {authMiddleware} from "../middlewares/verifyToken";
import adminMiddleware from "../middlewares/verifyAdmin"; // Si certains acc√®s sont r√©serv√©s aux admins

const router = express.Router();

/**
 * @swagger
 * tags:
 *   name: Groupes
 *   description: Gestion des groupes (CRUD, membres)
 */

/**
 * @swagger
 * /api/groups:
 *   post:
 *     summary: Cr√©er un groupe
 *     description: Permet aux utilisateurs connect√©s de cr√©er un groupe.
 *     tags: [Groupes]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - name
 *             properties:
 *               name:
 *                 type: string
 *                 example: "D√©veloppeurs Node.js"
 *               description:
 *                 type: string
 *                 example: "Un groupe pour les passionn√©s de Node.js"
 *     responses:
 *       201:
 *         description: Groupe cr√©√© avec succ√®s
 *       400:
 *         description: Erreur de validation
 *       401:
 *         description: Non autoris√©
 */

/**
 * @swagger
 * /api/groups:
 *   get:
 *     summary: R√©cup√©rer tous les groupes
 *     description: Permet de lister tous les groupes disponibles.
 *     tags: [Groupes]
 *     responses:
 *       200:
 *         description: Liste des groupes retourn√©e avec succ√®s
 */

/**
 * @swagger
 * /api/groups/{id}:
 *   get:
 *     summary: R√©cup√©rer un groupe par ID
 *     description: Permet d'obtenir les informations d'un groupe sp√©cifique.
 *     tags: [Groupes]
 *     parameters:
 *       - name: id
 *         in: path
 *         required: true
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: Groupe retourn√© avec succ√®s
 *       404:
 *         description: Groupe non trouv√©
 */

/**
 * @swagger
 * /api/groups/{id}:
 *   put:
 *     summary: Mettre √† jour un groupe
 *     description: Permet aux utilisateurs connect√©s de modifier un groupe existant.
 *     tags: [Groupes]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - name: id
 *         in: path
 *         required: true
 *         schema:
 *           type: string
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               name:
 *                 type: string
 *                 example: "Nouveau Nom du Groupe"
 *               description:
 *                 type: string
 *                 example: "Nouvelle description"
 *     responses:
 *       200:
 *         description: Groupe mis √† jour avec succ√®s
 *       400:
 *         description: Erreur de validation
 *       401:
 *         description: Non autoris√©
 *       404:
 *         description: Groupe non trouv√©
 */

/**
 * @swagger
 * /api/groups/{id}:
 *   delete:
 *     summary: Supprimer un groupe
 *     description: Supprime un groupe existant (r√©serv√© aux administrateurs).
 *     tags: [Groupes]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - name: id
 *         in: path
 *         required: true
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: Groupe supprim√© avec succ√®s
 *       401:
 *         description: Non autoris√©
 *       404:
 *         description: Groupe non trouv√©
 */


/**
 * @swagger
 * /api/groups/{id}/members:
 *   post:
 *     summary: Ajouter un membre √† un groupe
 *     description: Permet aux utilisateurs connect√©s d'ajouter un membre √† un groupe.
 *     tags: [Groupes]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - name: id
 *         in: path
 *         required: true
 *         schema:
 *           type: string
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - userId
 *             properties:
 *               userId:
 *                 type: string
 *                 example: "65a23456bcde7890fgh12345"
 *     responses:
 *       200:
 *         description: Membre ajout√© avec succ√®s
 *       400:
 *         description: Erreur de validation
 *       401:
 *         description: Non autoris√©
 *       404:
 *         description: Groupe ou utilisateur non trouv√©
 */







// üÜï Cr√©er un groupe (Utilisateur connect√©)
router.post(
  "/",
  authMiddleware,
  [
    body("name").notEmpty().withMessage("Le nom du groupe est requis"),
    body("description").optional().isString().withMessage("La description doit √™tre une cha√Æne"),
  ],
  createGroup
);

// üìå R√©cup√©rer tous les groupes (Public ou utilisateur connect√©)
router.get("/", getAllGroups);

// üîç R√©cup√©rer un groupe par ID
router.get(
  "/:id",
  param("id").isMongoId().withMessage("ID de groupe invalide"),
  getGroupById
);

// ‚úèÔ∏è Mettre √† jour un groupe par ID (Utilisateur connect√©)
router.put(
  "/:id",
  authMiddleware,
  [
    param("id").isMongoId().withMessage("ID de groupe invalide"),
    body("name").optional().notEmpty().withMessage("Le nom ne peut pas √™tre vide"),
    body("description").optional().isString().withMessage("La description doit √™tre une cha√Æne"),
  ],
  updateGroupById
);

// üóëÔ∏è Supprimer un groupe par ID (Admin uniquement)
router.delete(
  "/:id",
  authMiddleware,
  adminMiddleware,
  param("id").isMongoId().withMessage("ID de groupe invalide"),
  deleteGroupById
);

// ‚ûï Ajouter un membre √† un groupe (Utilisateur connect√©)
router.post(
  "/:id/members",
  authMiddleware,
  [
    param("id").isMongoId().withMessage("ID de groupe invalide"),
    body("userId").isMongoId().withMessage("ID de l'utilisateur invalide"),
  ],
  addMemberToGroup
);

// ‚ûñ Supprimer un membre d'un groupe (Utilisateur connect√©)
router.delete(
  "/:id/members",
  authMiddleware,
  [
    param("id").isMongoId().withMessage("ID de groupe invalide"),
    body("userId").isMongoId().withMessage("ID de l'utilisateur invalide"),
  ],
  removeMemberFromGroup
);

export default router;
